// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  OPERATOR
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole      @default(OPERATOR)
  authAccounts  AuthAccount[]
  sessions      Session[]
  transactions  Transaction[]
  auditLogs     AuditLog[]
  liabilities   Liability[]
  liabilityPayments LiabilityPayment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Model for NextAuth
model AuthAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model for Giri Financials App
model FinancialAccount {
  id           String        @id @default(cuid())
  name         String        @unique
  balance      Decimal       @default(0.0)
  isBank       Boolean       @default(false)
  transactions Transaction[]
  categories   Category[]    // New field
  liabilities  Liability[]   // Relasi ke liabilities
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum TransactionType {
  DEBIT
  CREDIT
  TRANSFER
}

model Category {
  id                 String           @id @default(cuid())
  name               String           @unique
  type               TransactionType
  isProtected        Boolean          @default(false)
  financialAccount   FinancialAccount? @relation(fields: [financialAccountId], references: [id])
  financialAccountId String?          @map("financial_account_id") // Add this line
  transactions       Transaction[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Student {
  id            String        @id @default(cuid())
  nis           String        @unique @default(cuid()) // Nomor Induk Siswa
  name          String
  parentName    String?
  contactNumber String?
  group         String?       // Kelompok siswa (Kupu-kupu, Kumbang, dll)
  active        Boolean       @default(true)
  enrollmentDate DateTime?
  graduationDate DateTime?
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id          String        @id @default(cuid())
  date        DateTime
  description String
  amount      Decimal
  type        TransactionType

  account     FinancialAccount @relation(fields: [accountId], references: [id])
  accountId   String

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?

  student     Student? @relation(fields: [studentId], references: [id])
  studentId   String?

  user        User     @relation(fields: [userId], references: [id])
  userId      String

  // Denormalized fields for data integrity
  accountName     String?
  categoryName    String?
  studentName     String?
  userName        String?

  // Balance tracking
  balanceBefore   Decimal?
  balanceAfter    Decimal?

  // Optional transaction proof file
  proofFile   String?

  // Relasi ke liability (untuk hutang)
  liability   Liability?

  // Relasi ke liability payment (untuk pembayaran cicil)
  liabilityPayment LiabilityPayment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  details   Json?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Parameter {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LiabilityStatus {
  PENDING
  PAID
  OVERDUE
}

model Liability {
  id          String          @id @default(cuid())
  vendorName  String          // Nama vendor/supplier
  amount      Decimal         // Total hutang awal
  paidAmount  Decimal         @default(0) // Total yang sudah dibayar
  dueDate     DateTime        // Tanggal jatuh tempo
  status      LiabilityStatus @default(PENDING)
  type        TransactionType @default(CREDIT) // Tipe hutang: DEBIT atau CREDIT
  description String?         // Deskripsi hutang
  notes       String?         // Catatan tambahan

  // Relasi ke transaksi
  transactionId String?   @unique
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  // Relasi ke user yang mencatat
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Akun keuangan yang digunakan (untuk hutang CREDIT yang tidak punya transaksi)
  accountId String?
  account   FinancialAccount? @relation(fields: [accountId], references: [id])

  // Relasi ke pembayaran cicil
  payments LiabilityPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LiabilityPayment {
  id          String  @id @default(cuid())
  amount      Decimal // Jumlah pembayaran cicil
  description String  // Deskripsi pembayaran
  date        DateTime @default(now())

  // Relasi ke liability
  liabilityId String
  liability   Liability @relation(fields: [liabilityId], references: [id], onDelete: Cascade)

  // Relasi ke transaksi pembayaran
  transactionId String? @unique
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  // Relasi ke user yang melakukan pembayaran
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
